@page "/apartado/change/{id:int}"
@rendermode InteractiveServer

@using Microsoft.AspNetCore.Components
@inject IFiestasReserva _fiestasReservas
@inject IFiestasSalones _fiestasSalones
@inject IFiestasClientes _fiestasClientes
@inject NavigationManager NavigationManager

<h3>Editar Reservación</h3>

@if (_reserva == null)
{
    <p><em>Cargando reserva...</em></p>
}
else
{
    <EditForm Model="_reserva" OnValidSubmit="Guardar">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="mb-3 row">
            <label for="selectCliente" class="col-sm-2 col-form-label">Cliente</label>
            <div>
                <InputSelect id="selectCliente" class="form-control" @bind-Value="_reserva.ClienteId">
                    <option value="">Seleccione un cliente</option>
                    @foreach (var cliente in _clientes)
                    {
                        <option value="@cliente.Id">@cliente.Nombre</option>
                    }
                </InputSelect>
                <ValidationMessage For="@(() => _reserva.ClienteId)" />
            </div>
        </div>

        <div class="mb-3">
            <label class="form-label">Nombre del Salón</label>
            <InputSelect class="form-control" @bind-Value="_reserva.SalonId">
                <option value="">-- Seleccione un salón --</option>
                @foreach (var salon in _salones)
                {
                    <option value="@salon.Id">@salon.Nombre</option>
                }
            </InputSelect>
        </div>

        <div class="mb-3">
            <label class="form-label">Fecha</label>
            <InputDate class="form-control" @bind-Value="_reserva.fecha" />
        </div>

        <button type="submit" class="btn btn-primary">Guardar Cambios</button>
        <button type="button" class="btn btn-secondary ms-2" @onclick="Cancelar">Cancelar</button>
    </EditForm>
}

@code {
    [Parameter]
    public int id { get; set; }

    private Reserva? _reserva;
    private List<Salones> _salones = new();
    private List<Clientes> _clientes = new();


    protected override async Task OnInitializedAsync()
    {
        _reserva = await _fiestasReservas.GetReserva(id);
        _salones = await _fiestasSalones.GetSalones(); 
        _clientes = await _fiestasClientes.ListarClientesAsync();

        if (_reserva == null)
        {
            NavigationManager.NavigateTo("/apartado");
        }
    }

    private async Task Guardar()
    {
        await _fiestasReservas.UpdateReserva(_reserva);
        NavigationManager.NavigateTo("/apartado");
    }

    private void Cancelar()
    {
        NavigationManager.NavigateTo("/apartado");
    }
}

